// Generated by CoffeeScript 1.8.0
var Sleep, Steps, async, cozydb, dataFields, importData, importYear, localization, log, moment, querystring, request;

cozydb = require('cozydb');

querystring = require('querystring');

request = require('request');

moment = require('moment');

async = require('async');

localization = require('../lib/localization_manager');

log = require('printit')({
  prefix: "Jawbone",
  date: true
});

dataFields = {
  DATE: "date",
  m_active_time: "activeTime",
  m_calories: "activeTimeCalories",
  m_distance: "distance",
  m_inactive_time: "inactiveTime",
  m_lcat: "longestActiveTime",
  m_lcit: "longestIdleTime",
  m_steps: "steps",
  m_total_calories: "totalCalories",
  s_asleep_time: "asleepTime",
  s_awake: "awakeDuration",
  s_awake_time: "awakeTime",
  s_awakenings: "awakeningCount",
  s_bedtime: "bedTime",
  s_deep: "deepSleepDuration",
  s_duration: "sleepDuration",
  s_light: "lightSleepDuration",
  s_quality: "sleepQuality"
};

Steps = cozydb.getModel('Steps', {
  date: Date,
  activeTime: Number,
  activeTimeCalories: Number,
  distance: Number,
  inactiveTime: Number,
  longestActiveTime: Number,
  longestIdleTime: Number,
  steps: Number,
  totalCalories: Number,
  vendor: {
    type: String,
    "default": 'Jawbone'
  }
});

Steps.all = function(callback) {
  return Steps.request('byDate', callback);
};

Sleep = cozydb.getModel('Sleep', {
  date: Date,
  asleepTime: Number,
  awakeDuration: Number,
  awakeTime: Number,
  awakeningCount: Number,
  bedTime: Number,
  deepSleepDuration: Number,
  lightSleepDuration: Number,
  sleepDuration: Number,
  sleepQuality: Number,
  vendor: {
    type: String,
    "default": 'Jawbone'
  }
});

Sleep.all = function(callback) {
  return Sleep.request('byDate', callback);
};

module.exports = {
  name: "Jawbone",
  slug: "jawbone",
  description: 'konnector description jawbone',
  vendorLink: "https://jawbone.com/up",
  fields: {
    login: "text",
    password: "password"
  },
  models: {
    moves: Steps,
    sleeps: Sleep
  },
  init: function(callback) {
    var map;
    map = function(doc) {
      return emit(doc.date, doc);
    };
    return Steps.defineRequest('byDate', map, function(err) {
      if (err) {
        callback(err);
      }
      return Sleep.defineRequest('byDate', map, function(err) {
        return callback(err);
      });
    });
  },
  fetch: function(requiredFields, callback) {
    var params;
    params = {
      limit: 1,
      descending: true
    };
    return Steps.request('byDate', params, (function(_this) {
      return function(err, moves) {
        var login, password, start, year;
        if (err) {
          return callback(err);
        } else {
          if (moves.length > 0) {
            start = moment(moves[0].date);
            year = start.format('YYYY-MM-DD').substring(0, 4);
          } else {
            start = moment('20110101', 'YYYYMMDD');
            year = '2011';
          }
          login = requiredFields.login;
          password = requiredFields.password;
          log.info("last data import was: " + (start.format()));
          if (moves.length > 0) {
            start.hours(0, 0, 0, 0);
            return moves[0].destroy(function(err) {
              return Sleep.request('byDate', params, function(err, sleeps) {
                var isSameDate;
                isSameDate = sleeps[0].date === moves[0].date;
                if (sleeps.length > 0 && isSameDate) {
                  return sleeps[0].destroy(function(err) {
                    if (err) {
                      return callback(err);
                    } else {
                      return _this.fetchData(login, password, start, year, callback);
                    }
                  });
                } else {
                  return _this.fetchData(login, password, start, year, callback);
                }
              });
            });
          } else {
            return _this.fetchData(login, password, start, year, callback);
          }
        }
      };
    })(this));
  },
  fetchData: function(login, password, start, year, callback) {
    var data, url;
    log.info('Import started');
    url = "https://jawbone.com/user/signin/login";
    data = {
      form: {
        email: login,
        pwd: password,
        service: "nudge"
      }
    };
    return request.post(url, data, function(err, res, body) {
      var currentYear, recImport, startYear, token;
      if (err) {
        return callback(err);
      } else if (res.statusCode !== 200) {
        return callback(new Error("Cannot connect to Jawbone server."));
      } else {
        body = JSON.parse(body);
        if (body.error != null) {
          if (body.error.msg != null) {
            log.error(body.error.msg);
          } else {
            log.error('Bad credentials');
          }
          return callback('bad credentials');
        } else {
          log.info('Konnector successfully logged in.');
          token = body.token;
          currentYear = moment().year();
          startYear = parseInt(year);
          recImport = function() {
            if (startYear <= currentYear) {
              return importYear(start, startYear, token, function() {
                startYear++;
                return recImport();
              });
            } else {
              return callback();
            }
          };
          return recImport();
        }
      }
    });
  }
};

importYear = function(start, year, token, callback) {
  var options, url;
  log.info("import year " + year);
  url = 'https://jawbone.com/user/settings/download_up_data?';
  url += querystring.stringify({
    year: year
  });
  options = {
    uri: url,
    headers: {
      'x-nudge-token': token
    }
  };
  return request.get(options, function(err, res, csvData) {
    if (err) {
      return callback(err);
    } else if (res.statusCode !== 200) {
      return callback(new Error("Error occured while fetching data"));
    } else {
      log.info('CSV file downloaded.');
      return importData(start, csvData, callback);
    }
  });
};

importData = function(start, csvData, callback) {
  var attr, columns, header, headers, j, lines, numItems, saveLine, _i, _len, _ref;
  lines = csvData.split('\n');
  headers = lines[0];
  columns = {};
  j = 0;
  _ref = headers.split(',');
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    header = _ref[_i];
    attr = dataFields[header];
    if (attr != null) {
      columns[attr] = j;
    }
    j++;
  }
  columns["date"] = 0;
  numItems = 0;
  saveLine = function(line, callback) {
    var date, move;
    line = line.split(',');
    date = moment(line[columns["date"]], "YYYYMMDD");
    if (date.toDate() >= start.toDate()) {
      move = new Steps({
        date: date,
        activeTime: line[columns["activeTime"]],
        activeTimeCalories: line[columns["activeTimeCalories"]],
        distance: line[columns["distance"]],
        inactiveTime: line[columns["inactiveTime"]],
        longestActiveTime: line[columns["longestActiveTime"]],
        longestIdleTime: line[columns["longestIdleTime"]],
        steps: line[columns["steps"]],
        totalCalories: line[columns["totalCalories"]]
      });
      numItems++;
      return move.save(function(err) {
        var sleep;
        if (err) {
          return callback(err);
        } else if (line[columns["asleepTime"]] !== '') {
          log.debug("move imported");
          log.debug(move);
          sleep = new Sleep({
            date: date,
            asleepTime: line[columns["asleepTime"]],
            awakeDuration: line[columns["awakeDuration"]],
            awakeTime: line[columns["awakeTime"]],
            awakeningCount: line[columns["awakeningCount"]],
            bedTime: line[columns["bedTime"]],
            deepSleepDuration: line[columns["deepSleepDuration"]],
            sleepDuration: line[columns["sleepDuration"]],
            lightSleepDuration: line[columns["lightSleepDuration"]],
            sleepQuality: line[columns["sleepQuality"]]
          });
          numItems++;
          return sleep.save(function(err) {
            if (err) {
              return callback(err);
            } else {
              log.debug("sleep imported");
              log.debug(sleep);
              return callback();
            }
          });
        } else {
          log.debug("move imported");
          log.debug(move);
          return callback();
        }
      });
    } else {
      return callback();
    }
  };
  return async.eachSeries(lines, saveLine, function(err) {
    var localizationKey, notifContent, options;
    log.info('CSV file imported.');
    notifContent = null;
    if (numItems > 0) {
      localizationKey = 'notification jawbone';
      options = {
        smart_count: numItems
      };
      notifContent = localization.t(localizationKey, options);
    }
    return callback(err, notifContent);
  });
};
