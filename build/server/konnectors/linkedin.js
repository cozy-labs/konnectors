// Generated by CoffeeScript 1.9.3
var ACCOUNT_TYPE, CompareContacts, Contact, ContactHelper, Tag, async, cheerio, fetcher, https, linkedin, log, logIn, prepareCozyContacts, request, retrieveContactList, retrieveTokens, saveContact, saveContacts, savePicture, updateContact, url;

request = require('request');

https = require('https');

url = require('url');

async = require('async');

cheerio = require('cheerio');

log = require('printit')({
  prefix: "Linkedin",
  date: true
});

fetcher = require('../lib/fetcher');

Contact = require('../models/contact');

Tag = require('../models/tag');

ContactHelper = require('../lib/contact_helper');

CompareContacts = require('../lib/compare_contacts');

ACCOUNT_TYPE = 'com.linkedin';

linkedin = {
  getPhoneNumber: function(data) {
    var listPhones, ref;
    listPhones = [];
    if ((ref = data.phone_numbers) != null) {
      ref.forEach(function(number) {
        return listPhones.push({
          name: 'tel',
          type: number.type.toLowerCase(),
          value: number.number.replace(/ /g, '')
        });
      });
    }
    return listPhones;
  },
  getEmails: function(data) {
    var listEmails, ref;
    listEmails = [];
    if ((ref = data.emails_extended) != null) {
      ref.forEach(function(email) {
        var ref1;
        return listEmails.push({
          name: 'email',
          value: email.email,
          type: 'internet',
          pref: (ref1 = email.primary === true) != null ? ref1 : {
            "true": void 0
          }
        });
      });
    }
    return listEmails;
  },
  getUrls: function(data) {
    var listUrls, ref, ref1, ref2;
    listUrls = [];
    if ((ref = data.sites) != null) {
      ref.forEach(function(site) {
        return listUrls.push({
          name: 'url',
          value: site.url,
          type: site.name
        });
      });
    }
    if ((ref1 = data.profiles) != null) {
      ref1.forEach(function(profile) {
        return listUrls.push({
          name: 'url',
          value: profile.url,
          type: 'linkedin'
        });
      });
    }
    if ((ref2 = data.twitter) != null) {
      ref2.forEach(function(twitter) {
        return listUrls.push({
          name: 'url',
          value: twitter.url,
          type: 'twitter'
        });
      });
    }
    return listUrls;
  },
  getAddresses: function(data) {
    var country, listAddresses, ref, segmentAddress;
    listAddresses = [];
    if (data.location != null) {
      segmentAddress = data.location.split(', ').reverse();
      country = segmentAddress[0] || '';
    }
    if ((ref = data.addresses) != null) {
      ref.forEach((function(_this) {
        return function(address) {
          var addressArray;
          addressArray = ContactHelper.adrStringToArray(address.raw);
          addressArray[6] = country;
          return listAddresses.push({
            name: 'adr',
            value: addressArray,
            type: 'main'
          });
        };
      })(this));
    }
    return listAddresses;
  }
};

module.exports = {
  name: "Linkedin",
  slug: "linkedin",
  description: "konnector description linkedin",
  fields: {
    login: "text",
    password: "password"
  },
  models: {
    contact: Contact
  },
  fetch: function(requiredFields, callback) {
    log.info('Import started');
    return fetcher["new"]().use(retrieveTokens).use(logIn).use(retrieveContactList).use(prepareCozyContacts).use(saveContacts).args(requiredFields, {}, {}).fetch(function(err, fields, entries) {
      if (err) {
        return callback(err);
      }
      log.info("Import finished");
      return callback();
    });
  }
};

retrieveTokens = function(requiredFields, entries, data, next) {
  var opts;
  opts = {
    url: 'https://linkedin.com',
    jar: true
  };
  log.info('Retrieving CSRF Token...');
  return request.get(opts, function(err, res, body) {
    var $;
    if (err) {
      return next(err);
    }
    if ((body.status != null) && body.status === 'error') {
      return next(new Error(body.status_details));
    } else {
      $ = cheerio.load(body);
      entries.csrfToken = $('#loginCsrfParam-login').val();
      entries.accountName = requiredFields.login;
      log.info('CSRF Token retrieved successfully.');
      return next();
    }
  });
};

logIn = function(requiredFields, entries, data, next) {
  var opts;
  opts = {
    url: 'https://www.linkedin.com/uas/login-submit',
    jar: true,
    form: {
      session_key: requiredFields.login,
      session_password: requiredFields.password,
      loginCsrfParam: entries.csrfToken,
      submit: "Sign+in"
    }
  };
  log.info('Signing in...');
  return request.post(opts, function(err, res, body) {
    if (err) {
      return next(err);
    }
    if (body === "") {
      log.info('Login succeeded!');
      return next();
    } else {
      log.error('Wrong login or password.');
      return next(new Error("Wrong login or password."));
    }
  });
};

retrieveContactList = function(requiredFields, entries, data, next) {
  var contactsUrl, opts;
  contactsUrl = "https://www.linkedin.com/contacts/api/contacts/";
  contactsUrl += "?start=0&count=10000&fields=id";
  opts = {
    url: contactsUrl,
    jar: true,
    json: true
  };
  log.info('Retrieving contact list...');
  return request.get(opts, function(err, res, body) {
    if (err) {
      return next(err);
    }
    if ((body.status != null) && body.status === 'error') {
      return next(new Error(body.status_details));
    } else {
      entries.listContacts = body.contacts;
      if (entries.listContacts == null) {
        return next(new Error("Error retrieving contacts from request"));
      } else {
        log.info('Contact list retrieved.');
        return next();
      }
    }
  });
};

prepareCozyContacts = function(requiredFields, entries, data, next) {
  log.info('Load Cozy contacts...');
  return Contact.all(function(err, contacts) {
    var account, contact, i, len;
    if (err) {
      return next(err);
    }
    entries.cozyContactsByFn = {};
    entries.cozyContactsByAccountIds = {};
    for (i = 0, len = contacts.length; i < len; i++) {
      contact = contacts[i];
      entries.cozyContactsByFn[contact.fn] = contact;
      account = contact.getAccount(ACCOUNT_TYPE, entries.accountName);
      if (account != null) {
        entries.cozyContactsByAccountIds[account.id] = contact;
      }
    }
    log.info('Cozy contacts contacts loaded.');
    return next();
  });
};

saveContacts = function(requiredFields, entries, data, next) {
  return Tag.getOrCreate({
    name: 'linkedin',
    color: '#1B86BC'
  }, function(err, tag) {
    var contacts, processLinkedinContact;
    if (err) {
      return next(err);
    }
    entries.tag = tag;
    processLinkedinContact = function(contact, done) {
      var contactUrl, opts;
      contactUrl = "https://www.linkedin.com/contacts/api/contacts/" + contact.id + "/?fields=name,first_name,last_name,emails_extended,phone_numbers,sites,addresses,company,title,geo_location,profiles,twitter,tag,secure_profile_image_url";
      opts = {
        url: contactUrl,
        jar: true,
        json: true
      };
      return request.get(opts, function(err, res, body) {
        var datapoints, newCozyContact, ref;
        if (err) {
          return done(err);
        }
        if ((body.status != null) && body.status === 'error') {
          return done(new Error(body.status_details));
        }
        datapoints = [];
        data = body.contact_data;
        datapoints = datapoints.concat(linkedin.getPhoneNumber(data));
        datapoints = datapoints.concat(linkedin.getEmails(data));
        datapoints = datapoints.concat(linkedin.getUrls(data));
        datapoints = datapoints.concat(linkedin.getAddresses(data));
        newCozyContact = new Contact({
          n: data.last_name + ";" + data.first_name,
          fn: data.name,
          org: (ref = data.company) != null ? ref.name : void 0,
          title: data.title,
          tags: ['linkedin'],
          datapoints: datapoints
        });
        newCozyContact.imageUrl = data.secure_profile_image_url;
        ContactHelper.setAccount(newCozyContact, {
          type: ACCOUNT_TYPE,
          name: entries.accountName,
          id: data.id
        });
        return saveContact(newCozyContact, entries, done);
      });
    };
    contacts = entries.listContacts;
    return async.eachSeries(contacts, processLinkedinContact, function(err) {
      log.info('All linkedin contacts were processed.');
      return next();
    });
  });
};

saveContact = function(newContact, entries, callback) {
  var cozyAccount, cozyContact, imageUrl, linkAccount, newRev, previousRev;
  if (newContact == null) {
    return callback();
  }
  linkAccount = ContactHelper.getAccount(newContact, ACCOUNT_TYPE, entries.accountName);
  imageUrl = newContact.imageUrl;
  delete newContact.imageUrl;
  if (entries.cozyContactsByAccountIds[newContact.id] != null) {
    cozyContact = entries.cozyContactsByAccountIds[linkAccount.id];
    cozyAccount = cozyContact.getAccount(ACCOUNT_TYPE, entries.accountName);
    newRev = ContactHelper.intrinsicRev(newContact);
    previousRev = ContactHelper.intrinsicRev(cozyContact);
    if (newRev !== previousRev) {
      log.info("Update " + cozyContact.fn + " with LinkedIn data.");
      return updateContact(cozyContact, newContact, imageUrl, callback);
    } else {
      log.info("LinkedIn contact " + cozyContact.fn + " is up to date.");
      return callback();
    }
  } else if (entries.cozyContactsByFn[newContact.fn] != null) {
    cozyContact = entries.cozyContactsByFn[newContact.fn];
    log.info("Link " + cozyContact.fn + " to linkedin account and update data.");
    return updateContact(cozyContact, newContact, imageUrl, callback);
  } else {
    log.info("Create new contact for " + newContact.fn + ".");
    return Contact.create(newContact, function(err, newContact) {
      if (err) {
        return callback(err);
      }
      return savePicture(newContact, imageUrl, callback);
    });
  }
};

updateContact = function(fromCozy, fromLinkedin, imageUrl, callback) {
  CompareContacts.mergeContacts(fromCozy, fromLinkedin);
  return fromCozy.save(function(err) {
    if (err) {
      return callback(err);
    }
    return savePicture(fromCozy, imageUrl, callback);
  });
};

savePicture = function(cozyContact, imageUrl, callback) {
  var opts;
  if (imageUrl != null) {
    opts = url.parse(imageUrl);
    return https.get(opts, function(stream) {
      stream.on('error', function(err) {
        return log.error(err);
      });
      return cozyContact.attachFile(stream, {
        name: 'picture'
      }, function(err) {
        if (err) {
          log.error("Error occured while saving picture for " + cozyContact.fn + ".");
          log.raw(err);
        } else {
          log.info("Picture successfully saved for " + cozyContact.fn + ".");
        }
        return callback();
      });
    });
  } else {
    return callback();
  }
};
