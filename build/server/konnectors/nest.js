// Generated by CoffeeScript 1.9.3
var NestApi, Temperature, cozydb, fetcher, getTemperature, localization, log, saveDataAndFile;

NestApi = require('nest-api');

cozydb = require('cozydb');

localization = require('../lib/localization_manager');

fetcher = require('../lib/fetcher');

saveDataAndFile = require('../lib/save_data_and_file');

log = require('printit')({
  prefix: "Nest",
  date: true
});

Temperature = cozydb.getModel('Temperature', {
  vendor: {
    type: String,
    "default": 'Nest'
  },
  date: Date,
  currentTemperature: String,
  targetTemperature: String
});

Temperature.all = function(callback) {
  return Temperature.request('byDate', callback);
};

getTemperature = function(requiredFields, data, nothing, next) {
  var nestApi;
  nestApi = new NestApi(requiredFields.email, requiredFields.password);
  return nestApi.login(function() {
    return nestApi.get(function(nestData) {
      var entry, shared;
      shared = nestData.shared[Object.keys(nestData.shared)[0]];
      entry = {};
      entry.currentTemperature = shared.current_temperature;
      entry.targetTemperature = shared.target_temperature;
      entry.date = new Date();
      data.fetched = [entry];
      return next();
    });
  });
};

module.exports = {
  name: "Nest",
  slug: "nest",
  description: 'Get Nest temperature history',
  vendorLink: "https://nest.com/",
  fields: {
    email: "text",
    password: "password"
  },
  models: {
    nestTemperature: Temperature
  },
  init: function(callback) {
    var map;
    log.info("Nest init");
    map = function(doc) {
      return emit(doc.date, doc);
    };
    return Temperature.defineRequest('byDate', map, function(err) {
      return callback(err);
    });
  },
  fetch: function(requiredFields, callback) {
    log.info("Import started");
    return fetcher["new"]().use(getTemperature).use(saveDataAndFile(log, Temperature, {})).args(requiredFields, {}, {}).fetch(function(err, fields, entries) {
      var notifContent;
      log.info("Import finished");
      notifContent = null;
      return callback(err, notifContent);
    });
  }
};
