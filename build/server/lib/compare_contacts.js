// Generated by CoffeeScript 1.9.3
var CC, ContactHelper, _extend, _union, compareN, diacritics, hasField;

diacritics = require('./diacritics');

ContactHelper = require('./contact_helper');

module.exports = CC = {};

CC.isSamePerson = function(contact1, contact2) {
  return contact1.fn === contact2.fn && contact1.datapoints.some(function(field) {
    var ref;
    if ((ref = field.name) === 'tel' || ref === 'adr' || ref === 'email' || ref === 'chat') {
      return hasField(field, contact2);
    } else {
      return false;
    }
  });
};

CC.mayBeSamePerson = function(contact1, contact2) {
  return compareN(contact1.n, contact2.n) > 0;
};

CC.findSimilars = function(contacts) {
  var contact, contact2, j, l, len, len1, similar, similars, viewed;
  viewed = {};
  similars = [];
  for (j = 0, len = contacts.length; j < len; j++) {
    contact = contacts[j];
    viewed[contact._id] = true;
    similar = [contact];
    for (l = 0, len1 = contacts.length; l < len1; l++) {
      contact2 = contacts[l];
      if (!(contact2._id in viewed) && CC.mayBeSamePerson(contact, contact2)) {
        viewed[contact2._id] = true;
        similar.push(contact2);
      }
    }
    if (similar.length > 1) {
      similars.push(similar);
    }
  }
  return similars;
};

CC.mergeContacts = function(base, toMerge) {
  toMerge.datapoints.forEach(function(field) {
    if (!hasField(field, base, true)) {
      return base.datapoints.push(field);
    }
  });
  delete toMerge.datapoints;
  if (toMerge.accounts != null) {
    toMerge.accounts.forEach(function(account) {
      if (!ContactHelper.hasAccount(base, account.type, account.name)) {
        return ContactHelper.setAccount(base, account);
      }
    });
    delete toMerge.accounts;
  }
  base.tags = _union(base.tags, toMerge.tags);
  delete toMerge.tags;
  if ((toMerge.note != null) && toMerge.note !== '' && (base.note != null) && base.note !== '') {
    base.note += "\n" + toMerge.note;
  }
  delete toMerge.note;
  base = _extend(base, toMerge);
  return base;
};

compareN = function(n1, n2) {
  var dummy, firstName1, firstName2, lastName1, lastName2, ref, ref1, simplify;
  ref = n1.split(';'), lastName1 = ref[0], firstName1 = ref[1], dummy = ref[2], dummy = ref[3], dummy = ref[4];
  ref1 = n2.split(';'), lastName2 = ref1[0], firstName2 = ref1[1], dummy = ref1[2], dummy = ref1[3], dummy = ref1[4];
  simplify = function(s) {
    s = diacritics.asciize(s);
    return s.toLowerCase();
  };
  lastName1 = simplify(lastName1);
  firstName1 = simplify(firstName1);
  lastName2 = simplify(lastName2);
  firstName2 = simplify(firstName2);
  if ((lastName1 !== '' || firstName1 !== '') && (lastName2 !== '' || firstName2 !== '') && (lastName1 === lastName2 && firstName1 === firstName2 || lastName1 === firstName2 && firstName1 === lastName2)) {
    return 1;
  } else {
    return -1;
  }
};

hasField = function(field, contact, checkType) {
  if (checkType == null) {
    checkType = false;
  }
  if (field.value == null) {
    return false;
  }
  return contact.datapoints.some(function(baseField) {
    var i, ref, same;
    if (field.name === baseField.name && (!checkType || checkType && field.type === baseField.type) && (baseField.value != null)) {
      if (field.name === 'tel') {
        return field.value.replace(/[-\s]/g, '') === baseField.value.replace(/[-\s]/g, '');
      } else if (field.name === 'adr') {
        same = true;
        i = 0;
        while (same && i < 7) {
          same = same && field.value[i] === baseField.value[i] || field.value[i] === "" && (baseField.value[i] == null) || !((ref = field.value) != null ? ref[i] : void 0) && baseField.value[i] === "";
          i++;
        }
        return same;
      } else {
        return field.value === baseField.value;
      }
    } else {
      return false;
    }
  });
};

_union = function(a, b) {
  a = a || [];
  b = b || [];
  return a.concat(b.filter(function(item) {
    return a.indexOf(item) < 0;
  }));
};

_extend = function(a, b) {
  var k, v;
  for (k in b) {
    v = b[k];
    if (v != null) {
      a[k] = v;
    }
  }
  return a;
};
